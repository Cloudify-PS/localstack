tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://cloudify.co/spec/cloudify/6.1.0/types.yaml
  - plugin:cloudify-openstack-plugin?version= >=3.0.0

inputs:
  server_name:
    type: string
    default: server

  server_image:
    type: string
    default: { get_secret: ubuntu_core_image }

  server_flavor:
    type: string
    default: { get_secret: small_image_flavor  }

  user_domain_name:
    default: default

  project_domain_name:
    default: default
  
  key_pair_name:
    default: { get_secret: key_pair_name  }
 
  external_nw_id:
    default: { get_secret: external_network_id  }

  agent_key_private:
    description: >
      The content of the agent's private key.
    default: { get_secret: agent_key_private }

  agent_key_public:
    description: >
      The content of the agent's public key.
    default: { get_secret: agent_key_public }

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ubuntu

dsl_definitions:
  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region_name: { get_secret: keystone_region }
    user_domain_name: { get_input: user_domain_name }
    project_domain_name: { get_input: project_domain_name }

node_templates:
  keypair:
    type: cloudify.nodes.openstack.KeyPair
    properties:
      use_external_resource: true
      resource_config:
        name: { get_input: key_pair_name }
      client_config: *openstack_config
  virtual_ip:
    type: cloudify.nodes.openstack.FloatingIP
    properties:
      client_config: *openstack_config
      resource_config:
        floating_network_id: { get_secret: external_network_id }
  security_group:
    type: cloudify.nodes.openstack.SecurityGroup
    properties:
      client_config: *openstack_config
      resource_config:
        name: security-group
        description: 'security group'
      security_group_rules:
        - direction: ingress
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - direction: ingress
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - direction: ingress
          protocol: tcp
          port_range_min: 4566
          port_range_max: 4566
        - direction: ingress
          protocol: tcp
          port_range_min: 4571
          port_range_max: 4571
  server_host:
    type:  cloudify.nodes.openstack.Server
    properties:
#      ip: { get_attribute: [virtual_ip, floating_ip_address] }
      resource_config:
        name:  { get_input: server_name }
      client_config: *openstack_config
      image: { get_input: server_image }
      flavor:  { get_input: server_flavor }
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        key: { get_input: agent_key_private }
    relationships:
      - target: host_port
        type: cloudify.relationships.openstack.server_connected_to_port
      - type: cloudify.relationships.openstack.server_connected_to_keypair 
        target: keypair
      - type: cloudify.relationships.openstack.server_connected_to_floating_ip
        target: virtual_ip
      - type: cloudify.relationships.openstack.port_connected_to_security_group
        target: security_group 
  localstack_app:
    type: cloudify.nodes.ApplicationModule
    interfaces:
      cloudify.interfaces.lifecycle:
        create: scripts/create_localstack.sh
        start: scripts/start_localstack.sh
    relationships:
    - type: cloudify.relationships.contained_in
      target: server_host
  host_port:
    type: cloudify.nodes.openstack.Port
    properties:
      client_config: *openstack_config
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_network
      - type: cloudify.relationships.depends_on
        target: private_subnet

  private_subnet:
    type: cloudify.nodes.openstack.Subnet
    properties:
      client_config: *openstack_config
      use_external_resource: true
      resource_config:
        id: { get_secret: private_subnet_name }
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_network

  private_network:
    type: cloudify.nodes.openstack.Network
    properties:
      client_config: *openstack_config
      use_external_resource: true
      resource_config:
        id: { get_secret: private_network_name }
